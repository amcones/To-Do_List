type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |+
    const path = require('path');
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const {StageTest, correct, wrong} = require('hs-test-web');

    class TodoTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                if (document.title !== 'To-Do List') {
                    return wrong("The title of the page should be 'To-Do List'")
                }

                return correct();
            }),
            this.page.execute(() => {

                let taskList = document.getElementById("task-list")

                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                const numberOfTasks = tasks.length;
                let counter = 0;

                while (true) {

                    if (counter > numberOfTasks) {
                        return wrong("Looks like after deleting a task it is not removed from the task list!")
                    }

                    const deleteButton = document.querySelector("button.delete-btn")
                    if (deleteButton === null) {
                        break
                    }
                    deleteButton.click()

                    counter++
                }

                taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("After deleting the tasks can't find <ul> tag with id '#task-list'")

                tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 0) {
                    return wrong("After deleting all the tasks there shouldn't be any <li> tag")
                }

                return correct()
            }),
            this.page.execute(() => {
                const tasksName = ['First task', 'Second task', 'Third task', 'Fourth task', 'Fifth task']

                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return wrong("Can't find button with id '#add-task-button'")

                const taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let currentTaskCounter = 1;

                for (let taskName of tasksName) {
                    inputField.value = taskName
                    addButton.click()

                    const tasks = taskList.getElementsByTagName("li")

                    if (tasks.length !== currentTaskCounter) {
                        return wrong("After adding a task number of the <li> tags is not increased!")
                    }

                    currentTaskCounter++
                }

                return correct()
            }),
            this.page.execute(() => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")
                if (tasks.length !== 5)
                    return wrong("Inside the <ul> tag should be 5 <li> elements after adding 5 tasks!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }


                return correct();
            }),
            this.page.execute(() => {
                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")

                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === 'Third task') {
                        const checkbox = task.querySelector("input[type=checkbox]")
                        checkbox.click()
                        break;
                    }
                }

                tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")

                    if (taskName === null) {
                        return wrong("After marking a task as completed can not find a <span> tag with 'task' class inside <li> tag")
                    }

                    if (taskName.textContent === 'Third task') {
                        let taskName = task.querySelector("span.task")
                        if (taskName === null)
                            return wrong("Inside each <li> tag should be one <span> tag with 'task' class")

                        if (!taskName.style.textDecoration.includes("line-through") &&
                            !getComputedStyle(taskName).textDecoration.includes("line-through")) {
                            return wrong("If checkbox is checked the task name should be crossed out.\n" +
                                "The span tag with task name should have 'text-decoration: line-trough' style")
                        }

                        return correct()
                    }
                }

                return wrong("Can't find task with name 'Third task' after it was added!")
            }),
            this.node.execute(async () => {
                await this.page.refresh()
                return correct()
            }),
            this.page.execute(async () => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 5) {
                    return wrong("Looks like you didn't store the tasks in the local storage.\n" +
                        "After refreshing the page expected 5 tasks!")
                }

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return correct()
            })
        ]
    }

    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new TodoTest().runTests()
    }, 30000)

  learner_created: false
- name: src/close.svg
  visible: true
  text: |-
    <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12.5 1.5625C6.45996 1.5625 1.5625 6.45996 1.5625 12.5C1.5625 18.54 6.45996 23.4375 12.5 23.4375C18.54 23.4375 23.4375 18.54 23.4375 12.5C23.4375 6.45996 18.54 1.5625 12.5 1.5625ZM16.5381 16.6553L14.9268 16.6479L12.5 13.7549L10.0757 16.6455L8.46191 16.6528C8.35449 16.6528 8.2666 16.5674 8.2666 16.4575C8.2666 16.4111 8.28369 16.3672 8.31299 16.3306L11.4893 12.5464L8.31299 8.76465C8.28349 8.72887 8.26712 8.68407 8.2666 8.6377C8.2666 8.53027 8.35449 8.44238 8.46191 8.44238L10.0757 8.44971L12.5 11.3428L14.9243 8.45215L16.5356 8.44482C16.6431 8.44482 16.731 8.53027 16.731 8.64014C16.731 8.68652 16.7139 8.73047 16.6846 8.76709L13.5132 12.5488L16.687 16.333C16.7163 16.3696 16.7334 16.4136 16.7334 16.46C16.7334 16.5674 16.6455 16.6553 16.5381 16.6553Z" fill="#FF6347"/>
    </svg>
  learner_created: true
- name: src/style.css
  visible: true
  text: |-
    /* Main */

    body{
        font-size: 20px;
    }

    /* Conteiner */
    .flex-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: auto;
        height: 50vh;
        width: auto;
    }


    /* Button */

    #add-task-button{
        text-transform: uppercase;
        font-weight: bolder;
        background-color: tomato;
        color: white;

        border: 0;
        padding: 10px;
        margin-top: 10px;
    }

    #add-task-button:hover {
        opacity: 0.8;
    }
    /* Input new task */

    #input-task{
        border: 0;
        border-bottom: 2px solid tomato;

        height: 25px;
        width: 250px;

        padding: 5px;

        font-size: 20px;
    }

    #input-task:focus{
        outline: none;
    }

    /* Task list */

    #task-list{
        list-style: none;
        padding: 0;
    }

    /* List element */

    #task-list li{
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    #task-list li span{
    }

    /* Checkbox */

    input[type="checkbox"]{
        width: 25px;
        height: 25px;
    }
    /* Delete task buttons */

    .delete-btn{
        width: 25px;
        height: 25px;
        background-image: url("close.svg");
        background-color: white;
        background-position: 0 0;

        padding: 0;
        border: 0;
        margin: 0 0 0 auto;
    }

    .del{
        text-decoration: line-through;
    }
  learner_created: true
- name: src/script.js
  visible: true
  text: |-
    function addTask() {
        let tasks = document.getElementById('task-list');
        let newtask = document.createElement('li');
        let newspan = document.createElement('span');
        let newinput = document.createElement('input');
        let inputbox = document.getElementById('input-task');
        let newbutton = document.createElement('button');
        newinput.type = 'checkbox';
        newinput.onchange = function (){
            if(this.checked)this.nextElementSibling.classList.add('del');
            else if(!this.checked)this.nextElementSibling.classList.remove('del');
        }
        newspan.className = 'task';
        newspan.innerHTML = inputbox.value;
        newbutton.onclick = function (){
            let parent = this.parentNode;
            document.getElementById('task-list').removeChild(parent);
        }
        newbutton.className = 'delete-btn';
        newtask.appendChild(newinput);
        newtask.appendChild(newspan);
        newtask.appendChild(newbutton);
        tasks.appendChild(newtask);
        inputbox.value = null;
    }
    function isCheck(my){
        if(my.checked)my.nextElementSibling.classList.add('del');
        else if(!my.checked)my.nextElementSibling.classList.remove('del');
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/183/stages/930/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 07 Apr 2022 03:38:51 UTC
record: -1
